#include <iostream>
#include <fstream>
#include <string>
#include <cstring>

enum Error{k_ErrorLinesValue,k_ErrorInvalidDelimetr,k_ErrorNoFileileName,k_ErrorManyFileName,k_ErrorNoFile};
char delim = '\n';

struct Argument  {
    std::string file_name;
    bool can_Help = false;
    bool can_Tail = false;
    int32_t lines = -1;
    char delimiter = delim;
    bool correct_args = true;
};

void ShowHelp()
{
    std::cout << "  Options: \n"
              << "\t-h, --help \t \t Show this help message\n"
              << "\t-l, --lines=n \t \t Print n first / last lines \n"
              << "\t-t, --tail \t \tPrint the last lines of the file \n"
              << "\t-d, --delimiter=c \t String limiter (default \\n)";
}

void Warning(int32_t error) {
    switch(error) {
        case k_ErrorLinesValue :
            std::cerr << "ERROR: Invalid lines" << '\n';
            break;
        case k_ErrorNoFileileName:
            std::cerr << "ERROR: No file name" << '\n';
            break;
        case k_ErrorManyFileName:
            std::cerr << "ERROR: Many file names" << '\n';
            break;
        case k_ErrorNoFile:
            std::cerr << "ERROR: Can't open file" << '\n';
            break;
        case k_ErrorInvalidDelimetr:
            std::cerr << "ERROR: Invalid Delimeter" << '\n';
            break;
    }
}

char SpecialSymbol(std::string_view option, Argument& Parameters) {
    if (option.length() == 3) {
        return option[1];
    }
    if (option[1] != '\\' ) {
        Warning(k_ErrorInvalidDelimetr);
        Parameters.correct_args = false;
        return '\n';
    }
    switch (option[2]) {
        case 'n':
            return '\n';
        case 't':
            return '\t';
        case 'r':
            return '\r';
        case 'f':
            return '\f';
        case 'v':
            return '\v';
        case 'b':
            return '\b';
        case 'a':
            return '\a';
        case '\\':
            return '\\';
        case '\'':
            return '\'';
        case '\"':
            return '\"';
        case '0':
            return '\0';
        case '?':
            return '\?';
        default:
            Warning(k_ErrorInvalidDelimetr);
            Parameters.correct_args = false;
            return '\n';
    }
}

void ParseArguments(int32_t argc, char** argv, Argument& Parameters) {
    for (int32_t i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg == "--help" || arg == "-h") {
            ShowHelp();
            Parameters.can_Help= true;
            return;
        }
        else
            if (arg == "-l") {
            if (std::stoi(argv[++i]) >= 0) {
                Parameters.lines = std::stoi(argv[i]);
            }
            else {
                Warning(k_ErrorLinesValue );
            }
        }
            else if (arg.substr(0, strlen("--lines=")) == "--lines=") {
            arg = arg.substr(strlen("--lines="), arg.length() - strlen("--lines="));
            Parameters.lines = std::stoi(arg);
        }else if (arg == "-d") {
                    if (i >= argc - 1) {
                        Warning(k_ErrorInvalidDelimetr);
                        Parameters.correct_args = false;
                        return;
                    }
                    Parameters.delimiter = SpecialSymbol(argv[++i], Parameters);
                }else if (arg.find("--delimiter=") == 0) {
                    Parameters.delimiter = SpecialSymbol(arg.substr(12), Parameters);
                }else if ((i == 1 || i == argc - 1) && Parameters.file_name.empty()) {
                    Parameters.file_name = arg;
                } else if (arg == "-t" || arg == "--tail"){
                Parameters.can_Tail = true;
            }
            else if (Parameters.file_name.empty()) {
                Parameters.file_name = arg;
        }
            else{
                Warning(k_ErrorManyFileName);
        }
    }
}

void Print(Argument Parameters) {
    std::string line;
    std::ifstream file(Parameters.file_name);
    if (!file.is_open()) {
        Warning(k_ErrorNoFile);
    } else {
        if (Parameters.lines == -1) {
            while (getline(file, line, Parameters.delimiter)) {
                std::cout << line << Parameters.delimiter;
            }
        } else if (!Parameters.can_Tail) {
            for (int32_t i = 0; i < Parameters.lines; ++i) {
                if (getline(file, line, Parameters.delimiter)) {
                    std::cout << line << Parameters.delimiter;
                }
            }
        } else {
            int32_t size = 0;
            std::string Lines[Parameters.lines];
            while (file.good()) {
                getline(file, Lines[size % Parameters.lines], Parameters.delimiter);
                ++size;
            }
            int32_t start;
            if (size > Parameters.lines) {
                start = size % Parameters.lines;
            } else {
                start = 0;
            }
            int32_t count = std::min(Parameters.lines, size);
            for (int32_t i = 0; i < count; ++i) {
                std::cout << Lines[(start + i) % Parameters.lines];
                if (i != count - 1) {
                    std::cout << Parameters.delimiter;
                }
            }
        }
    }
}
int main(int32_t argc, char** argv)
{
    std::ofstream file;
    Argument Parameters;
    ParseArguments(argc, argv, Parameters);
    if (Parameters.file_name.empty() && !Parameters.can_Help)
    {
        Warning(k_ErrorNoFileileName);
        return EXIT_FAILURE;
    }
    if (!Parameters.can_Help) {
        Print(Parameters);
    }
    return EXIT_FAILURE;
}
